package engine


val MagicRNumbers = arrayOf(
    0xA180022080400230UL, 0x0040100040022000UL, 0x0080088020001002UL, 0x0080080280841000UL,
    0x4200042010460008UL, 0x04800A0003040080UL, 0x0400110082041008UL, 0x008000A041000880UL,
    0x10138001A080C010UL, 0x0000804008200480UL, 0x00010011012000C0UL, 0x0022004128102200UL,
    0x000200081201200CUL, 0x202A001048460004UL, 0x0081000100420004UL, 0x4000800380004500UL,
    0x0000208002904001UL, 0x0090004040026008UL, 0x0208808010002001UL, 0x2002020020704940UL,
    0x8048010008110005UL, 0x6820808004002200UL, 0x0A80040008023011UL, 0x00B1460000811044UL,
    0x4204400080008EA0UL, 0xB002400180200184UL, 0x2020200080100380UL, 0x0010080080100080UL,
    0x2204080080800400UL, 0x0000A40080360080UL, 0x02040604002810B1UL, 0x008C218600004104UL,
    0x8180004000402000UL, 0x488C402000401001UL, 0x4018A00080801004UL, 0x1230002105001008UL,
    0x8904800800800400UL, 0x0042000C42003810UL, 0x008408110400B012UL, 0x0018086182000401UL,
    0x2240088020C28000UL, 0x001001201040C004UL, 0x0A02008010420020UL, 0x0010003009010060UL,
    0x0004008008008014UL, 0x0080020004008080UL, 0x0282020001008080UL, 0x50000181204A0004UL,
    0x48FFFE99FECFAA00UL, 0x48FFFE99FECFAA00UL, 0x497FFFADFF9C2E00UL, 0x613FFFDDFFCE9200UL,
    0xFFFFFFE9FFE7CE00UL, 0xFFFFFFF5FFF3E600UL, 0x0010301802830400UL, 0x510FFFF5F63C96A0UL,
    0xEBFFFFB9FF9FC526UL, 0x61FFFEDDFEEDAEAEUL, 0x53BFFFEDFFDEB1A2UL, 0x127FFFB9FFDFB5F6UL,
    0x411FFFDDFFDBF4D6UL, 0x0801000804000603UL, 0x0003FFEF27EEBE74UL, 0x7645FFFECBFEA79EUL,
)
val MagicBNumbers = arrayOf(
    0xFFEDF9FD7CFCFFFFUL, 0xFC0962854A77F576UL, 0x5822022042000000UL, 0x2CA804A100200020UL,
    0x0204042200000900UL, 0x2002121024000002UL, 0xFC0A66C64A7EF576UL, 0x7FFDFDFCBD79FFFFUL,
    0xFC0846A64A34FFF6UL, 0xFC087A874A3CF7F6UL, 0x1001080204002100UL, 0x1810080489021800UL,
    0x0062040420010A00UL, 0x5028043004300020UL, 0xFC0864AE59B4FF76UL, 0x3C0860AF4B35FF76UL,
    0x73C01AF56CF4CFFBUL, 0x41A01CFAD64AAFFCUL, 0x040C0422080A0598UL, 0x4228020082004050UL,
    0x0200800400E00100UL, 0x020B001230021040UL, 0x7C0C028F5B34FF76UL, 0xFC0A028E5AB4DF76UL,
    0x0020208050A42180UL, 0x001004804B280200UL, 0x2048020024040010UL, 0x0102C04004010200UL,
    0x020408204C002010UL, 0x02411100020080C1UL, 0x102A008084042100UL, 0x0941030000A09846UL,
    0x0244100800400200UL, 0x4000901010080696UL, 0x0000280404180020UL, 0x0800042008240100UL,
    0x0220008400088020UL, 0x04020182000904C9UL, 0x0023010400020600UL, 0x0041040020110302UL,
    0xDCEFD9B54BFCC09FUL, 0xF95FFA765AFD602BUL, 0x1401210240484800UL, 0x0022244208010080UL,
    0x1105040104000210UL, 0x2040088800C40081UL, 0x43FF9A5CF4CA0C01UL, 0x4BFFCD8E7C587601UL,
    0xFC0FF2865334F576UL, 0xFC0BF6CE5924F576UL, 0x80000B0401040402UL, 0x0020004821880A00UL,
    0x8200002022440100UL, 0x0009431801010068UL, 0xC3FFB7DC36CA8C89UL, 0xC3FF8A54F4CA2C89UL,
    0xFFFFFCFCFD79EDFFUL, 0xFC0863FCCB147576UL, 0x040C000022013020UL, 0x2000104000420600UL,
    0x0400000260142410UL, 0x0800633408100500UL, 0xFC087E8E4BB2F736UL, 0x43FF9E4EF4CA2C89UL,
)

val BMagics = Array(64) { initMagics(BISHOP, it) }
val RMagics = Array(64) { initMagics(ROOK, it) }


class Magic(
    val attacks: Array<Bitboard>,
    private val mask: Bitboard,
    private val magic: ULong,
    private val shift: Int) {

    fun index(occ: Bitboard) = (((occ and mask).bb * magic) shr shift).toInt()
    fun attackBB(occ: Bitboard) = attacks[index(occ)]
}

fun initMagics(pt: PieceType, sq: Square): Magic {
    val (magic, steps) = when(pt) {
        ROOK -> Pair(MagicRNumbers, intArrayOf(8, 1, -8, -1))
        else -> Pair(MagicBNumbers, intArrayOf(7, 9, -7, -9))
    }

    fun makeSliderAttackBB(occ: Bitboard): Bitboard {
        var res = Bitboard()
        for (step in steps) {
            var tempSq = sq
            while ((occ and tempSq).isEmpty() && landingSquareBB(tempSq, step).nonEmpty()) {
                tempSq += step
                res = res or tempSq
            }
        }
        return res
    }

    val edges = ((BBrank1 or BBrank8) and RankBB[sq.rank()].inv()) or
                ((BBfileA or BBfileH) and FileBB[sq.file()].inv())

    val mask = edges.inv() and makeSliderAttackBB(Bitboard())

    return Magic(
        Array(2 shl mask.popcnt()) { Bitboard() },
        mask,
        magic[sq],
        64 - mask.popcnt()
    ).apply {
        var occ = Bitboard()
        do {
            attacks[index(occ)] = makeSliderAttackBB(occ)
            occ = (occ - mask) and mask
        } while (occ.nonEmpty())
    }
}
